geom_density(aes(x = Perim_cef, y = after_stat(density), col = 'gaussian'), kernel = "gaussian", adjust = 0.5)
ggplot() +
geom_histogram(aes(x = Perim_cef, y = after_stat(density)), binwidth = 1) + geom_density(aes(x = Perim_cef, y = after_stat(density)), col = "green", kernel = "rectangular", adjust = 0.5) +
geom_density(aes(x = Perim_cef, y = after_stat(density), col = 'epanechnikov'), kernel = "epanechnikov", adjust = 0.5) +
geom_density(aes(x = Perim_cef, y = after_stat(density), col = 'gaussian'), kernel = "gaussian", adjust = 0.5)
ggplot() +
geom_histogram(aes(x = Perim_cef, y = after_stat(density)), binwidth = 1) + geom_density(aes(x = Perim_cef, y = after_stat(density)), col = 'green', kernel = "rectangular", adjust = 2) +
geom_density(aes(x = Perim_cef, y = after_stat(density), col = 'epanechnikov'), kernel = "epanechnikov", adjust = 2) +
geom_density(aes(x = Perim_cef, y = after_stat(density), col = 'gaussian'), kernel = "gaussian", adjust = 2)
ggplot() +
geom_histogram(aes(x = Perim_cef, y = after_stat(density)), binwidth = 1, col = 'grey') + geom_density(aes(x = Perim_cef, y = after_stat(density)), col = 'rectangular', kernel = "rectangular", adjust = 2) +
geom_density(aes(x = Perim_cef, y = after_stat(density), col = 'epanechnikov'), kernel = "epanechnikov", adjust = 2) +
geom_density(aes(x = Perim_cef, y = after_stat(density), col = 'gaussian'), kernel = "gaussian", adjust = 2)
scale_color_manual(values = c(epanechnikov = 'green', gaussian = 'blue'))
ggplot() +
geom_histogram(aes(x = Perim_cef, y = after_stat(density)), binwidth = 1, col = 'grey') + geom_density(aes(x = Perim_cef, y = after_stat(density)), col = 'rectangular', kernel = "rectangular", adjust = 2) +
geom_density(aes(x = Perim_cef, y = after_stat(density), col = 'epanechnikov'), kernel = "epanechnikov", adjust = 2) +
geom_density(aes(x = Perim_cef, y = after_stat(density), col = 'gaussian'), kernel = "gaussian", adjust = 2)
ggplot() +
geom_histogram(aes(x = Perim_cef, y = after_stat(density)), binwidth = 1, col = 'grey') + geom_density(aes(x = Perim_cef, y = after_stat(density)), col = 'red', kernel = "rectangular", adjust = 2) +
geom_density(aes(x = Perim_cef, y = after_stat(density), col = 'epanechnikov'), kernel = "epanechnikov", adjust = 2) +
geom_density(aes(x = Perim_cef, y = after_stat(density), col = 'gaussian'), kernel = "gaussian", adjust = 2)
scale_color_manual(values = c(epanechnikov = 'green', gaussian = 'blue'))
ggplot() +
geom_histogram(aes(x = Perim_cef, y = after_stat(density)), binwidth = 1) + geom_density(aes(x = Perim_cef, y = after_stat(density)), col = 'red', kernel = "rectangular", adjust = 2) +
geom_density(aes(x = Perim_cef, y = after_stat(density), col = 'epanechnikov'), kernel = "epanechnikov", adjust = 2) +
geom_density(aes(x = Perim_cef, y = after_stat(density), col = 'gaussian'), kernel = "gaussian", adjust = 2)
scale_color_manual(values = c(epanechnikov = 'green', gaussian = 'blue'))
ggplot() +
geom_histogram(aes(x = Perim_cef, y = after_stat(density)), binwidth = 1) + geom_density(aes(x = Perim_cef, y = after_stat(density)), col = 'green', kernel = "rectangular", adjust = 2) +
geom_density(aes(x = Perim_cef, y = after_stat(density), col = 'epanechnikov'), kernel = "epanechnikov", adjust = 2) +
geom_density(aes(x = Perim_cef, y = after_stat(density), col = 'gaussian'), kernel = "gaussian", adjust = 2)
scale_color_manual(values = c(epanechnikov = 'red', gaussian = 'blue'))
ggplot() +
geom_histogram(aes(x = Perim_cef, y = after_stat(density)), binwidth = 1) + geom_density(aes(x = Perim_cef, y = after_stat(density)), col = 'rectangular', kernel = "rectangular", adjust = 2) +
geom_density(aes(x = Perim_cef, y = after_stat(density), col = 'epanechnikov'), kernel = "epanechnikov", adjust = 2) +
geom_density(aes(x = Perim_cef, y = after_stat(density), col = 'gaussian'), kernel = "gaussian", adjust = 2)
ggplot() +
geom_histogram(aes(x = Perim_cef, y = after_stat(density)), binwidth = 1) + geom_density(aes(x = Perim_cef, y = after_stat(density)), col = 'green', kernel = "rectangular", adjust = 2) +
geom_density(aes(x = Perim_cef, y = after_stat(density), col = 'epanechnikov'), kernel = "epanechnikov", adjust = 2) +
geom_density(aes(x = Perim_cef, y = after_stat(density), col = 'gaussian'), kernel = "gaussian", adjust = 2)
ggplot() +
geom_histogram(aes(x = Perim_cef, y = after_stat(density)), binwidth = 1) + geom_density(aes(x = Perim_cef, y = after_stat(density)), col = "green", kernel = "rectangular", adjust = 0.5) +
geom_density(aes(x = Perim_cef, y = after_stat(density), col = 'epanechnikov'), kernel = "epanechnikov", adjust = 0.5) +
geom_density(aes(x = Perim_cef, y = after_stat(density), col = 'gaussian'), kernel = "gaussian", adjust = 0.5)
ggplot() +
geom_histogram(aes(x = Perim_cef, y = after_stat(density)), binwidth = 1) + geom_density(aes(x = Perim_cef, y = after_stat(density)), col = 'green', kernel = "rectangular", adjust = 2) +
geom_density(aes(x = Perim_cef, y = after_stat(density), col = 'epanechnikov'), kernel = "epanechnikov", adjust = 2) +
geom_density(aes(x = Perim_cef, y = after_stat(density), col = 'gaussian'), kernel = "gaussian", adjust = 2)
data <- read.table("ENNyS_menorA2.txt", header = TRUE)
data <- read.table("ENNyS_menorA2.txt", header = TRUE)
attach(data)
library(ggplot2)
ggplot(data, aes(x = Perim_cef)) +
geom_histogram(aes(y = ..density..), breaks = seq(floor(min(Perim_cef)),ceiling(max(Perim_cef)) + 1, by = 1.75),fill = "lightblue", colour = "black") +
geom_density(kernel = "gaussian", colour = "red", n = 512) +  # Densidad con núcleo gaussiano
geom_density(kernel = "rectangular", colour = "green", n = 512) +
geom_density(kernel = "epanechnikov", colour = "blue", n = 512)+
theme_minimal()
hist_data <- hist(Perim_cef, breaks = seq(floor(min(Perim_cef)),ceiling(max(Perim_cef)) + 1, by = 1.75), plot = FALSE)
bin_widths <- diff(hist_data$breaks)
# Buscamos los indices de los bins que contengan al 42 y al 48.
indices_extremos <- which(hist_data$breaks[-length(hist_data$breaks)] <= 48 & hist_data$breaks[-1] >= 42)
# Calculo el área de los bins que están totalmente en rango (ambos bordes)
bins_totales <- hist_data$density[indices_extremos[-c(1, length(indices_extremos))]]
area_de_totales <- sum(bins_totales * bin_widths[indices_extremos[-c(1, length(indices_extremos))]])
# Área parcial del primer bin en rango
primer_bin_parcial = hist_data$breaks[indices_extremos[1] + 1] - 42
primer_area = primer_bin_parcial * hist_data$density[indices_extremos[1]]
# Área parcial del último bin en rango
ultimo_bin_parcial = 48 - hist_data$breaks[indices_extremos[length(indices_extremos)]]
ultima_area = ultimo_bin_parcial * hist_data$density[indices_extremos[length(indices_extremos)]]
# Sumo las áreas
total_area = area_de_totales + primer_area + ultima_area
#Calculo la probabilidad usando la densidad
density_data <- density(Perim_cef, kernel = "epanechnikov", from=floor(min(Perim_cef)), to=ceiling(max(Perim_cef)), n=512)
x_vals <- seq(42, 48, length.out = 100)
y_vals <- approx(density_data$x, density_data$y, xout=x_vals)$y
prob_density <- sum(y_vals) * (x_vals[2] - x_vals[1])
cat("La probabilidad calculada con el histograma es: ", total_area, "\t")
cat("La probabilidad calculada con la estimacion de la densidad es: ", prob_density)
ggplot(data, aes(x = Perim_cef)) +
geom_density(kernel = "gaussian", bw =gaussian_density$bw ,colour = "red") +
geom_density(kernel = "gaussian",bw =rectangular_density$bw*2,colour = "green") +
geom_density(kernel = "gaussian",bw = epanechnikov_density$bw/2, colour = "blue")+
theme_minimal() + ylab("Densidad") + xlab("Perim_Cef")
gaussian_density <- density(data= data$Perim_cef,kernel = "gaussian")
gaussian_density <- density(data$Perim_cef,kernel = "gaussian")
gaussian_density <- density(data$Perim_cef,kernel = "gaussian")
ggplot(data, aes(x = Perim_cef)) +
geom_density(kernel = "gaussian", bw =gaussian_density$bw ,colour = "red") +
geom_density(kernel = "gaussian",bw =rectangular_density$bw*2,colour = "green") +
geom_density(kernel = "gaussian",bw = epanechnikov_density$bw/2, colour = "blue")+
theme_minimal() + ylab("Densidad") + xlab("Perim_Cef")
gaussian_density <- density(data$Perim_cef,kernel = "gaussian")
rectangular_density <- density(data$Perim_cef,kernel = "rectangular")
epanechnikov_density <- density(data$Perim_cef,kernel = "epanechnikov")
ggplot(data, aes(x = Perim_cef)) +
geom_density(kernel = "gaussian", bw =gaussian_density$bw ,colour = "red") +
geom_density(kernel = "gaussian",bw =rectangular_density$bw*2,colour = "green") +
geom_density(kernel = "gaussian",bw = epanechnikov_density$bw/2, colour = "blue")+
theme_minimal() + ylab("Densidad") + xlab("Perim_Cef")
data <- read.table("ENNyS_menorA2.txt", header = TRUE)
attach(data)
library(ggplot2)
ggplot(data, aes(x = Perim_cef)) +
geom_histogram(aes(y = ..density..), breaks = seq(floor(min(Perim_cef)),ceiling(max(Perim_cef)) + 1, by = 1.75),fill = "lightblue", colour = "black") +
geom_density(kernel = "gaussian", colour = "red", n = 512) +  # Densidad con núcleo gaussiano
geom_density(kernel = "rectangular", colour = "green", n = 512) +
geom_density(kernel = "epanechnikov", colour = "blue", n = 512)+
theme_minimal()
hist_data <- hist(Perim_cef, breaks = seq(floor(min(Perim_cef)),ceiling(max(Perim_cef)) + 1, by = 1.75), plot = FALSE)
bin_widths <- diff(hist_data$breaks)
# Buscamos los indices de los bins que contengan al 42 y al 48.
indices_extremos <- which(hist_data$breaks[-length(hist_data$breaks)] <= 48 & hist_data$breaks[-1] >= 42)
# Calculo el área de los bins que están totalmente en rango (ambos bordes)
bins_totales <- hist_data$density[indices_extremos[-c(1, length(indices_extremos))]]
area_de_totales <- sum(bins_totales * bin_widths[indices_extremos[-c(1, length(indices_extremos))]])
# Área parcial del primer bin en rango
primer_bin_parcial = hist_data$breaks[indices_extremos[1] + 1] - 42
primer_area = primer_bin_parcial * hist_data$density[indices_extremos[1]]
# Área parcial del último bin en rango
ultimo_bin_parcial = 48 - hist_data$breaks[indices_extremos[length(indices_extremos)]]
ultima_area = ultimo_bin_parcial * hist_data$density[indices_extremos[length(indices_extremos)]]
# Sumo las áreas
total_area = area_de_totales + primer_area + ultima_area
#Calculo la probabilidad usando la densidad
density_data <- density(Perim_cef, kernel = "epanechnikov", from=floor(min(Perim_cef)), to=ceiling(max(Perim_cef)), n=512)
x_vals <- seq(42, 48, length.out = 100)
y_vals <- approx(density_data$x, density_data$y, xout=x_vals)$y
prob_density <- sum(y_vals) * (x_vals[2] - x_vals[1])
cat("La probabilidad calculada con el histograma es: ", total_area, "\t")
cat("La probabilidad calculada con la estimacion de la densidad es: ", prob_density)
gaussian_density <- density(data$Perim_cef,kernel = "gaussian")
rectangular_density <- density(data$Perim_cef,kernel = "rectangular")
epanechnikov_density <- density(data$Perim_cef,kernel = "epanechnikov")
ggplot(data, aes(x = Perim_cef)) +
geom_density(kernel = "gaussian", bw =gaussian_density$bw ,colour = "red") +
geom_density(kernel = "gaussian",bw =rectangular_density$bw*2,colour = "green") +
geom_density(kernel = "gaussian",bw = epanechnikov_density$bw/2, colour = "blue")+
theme_minimal() + ylab("Densidad") + xlab("Perim_Cef")
ggplot(data, aes(x = Perim_cef)) +
geom_density(kernel = "rectangular", bw =gaussian_density$bw ,colour = "red") +
geom_density(kernel = "rectangular",bw =rectangular_density$bw*2,colour = "green") +
geom_density(kernel = "rectangular",bw = epanechnikov_density$bw/2, colour = "blue")+
theme_minimal() + ylab("Densidad") + xlab("Perim_Cef")
ggplot(data, aes(x = Perim_cef)) +
geom_density(kernel = "epanechnikov", bw =gaussian_density$bw ,colour = "red") +
geom_density(kernel = "epanechnikov",bw =rectangular_density$bw*2,colour = "green") +
geom_density(kernel = "epanechnikov",bw = epanechnikov_density$bw/2, colour = "blue")+
theme_minimal() + ylab("Densidad") + xlab("Perim_Cef")
# Histograma y densidad estimada con núcleo gaussiano
ggplot(data, aes(x = Perim_cef)) +
geom_histogram(aes(y = ..density..), binwidth = 1,position = 'identity',alpha = 0.5) +
geom_density(alpha = 0.7) +
ggtitle("Histograma y Densidad Gaussiana de Perímetro Cefálico") +
xlab("Perímetro Cefálico") +
ylab("Densidad") +
theme_minimal()
# Histograma y densidad estimada con núcleo gaussiano
ggplot(data, aes(x = Perim_cef,fill = Sexo)) +
geom_histogram(aes(y = ..density..), binwidth = 1,position = 'identity',alpha = 0.5) +
geom_density(alpha = 0.7) +
ggtitle("Histograma y Densidad Gaussiana de Perímetro Cefálico Por Sexo") +
xlab("Perímetro Cefálico") +
ylab("Densidad") +
theme_minimal()+
scale_fill_brewer(palette = "Set1")
ggplot(data, aes(x = Perim_cef)) +
geom_histogram(aes(y = ..density..), position = "identity", alpha = 0.5) +
geom_density(alpha = 0.7) +
ggtitle("Densidades Gaussianas de Perímetro Cefálico") +
xlab("Perímetro Cefálico") +
ylab("Densidad")
# Suponiendo que los tipos de embarazo son 'Simple' y 'Múltiple'
ggplot(data, aes(x = Perim_cef, fill = Tipo_embarazo)) +
geom_histogram(aes(y = ..density..), position = "identity", alpha = 0.5) +
geom_density(alpha = 0.7) +
ggtitle("Densidades Gaussianas de Perímetro Cefálico por Tipo de Embarazo") +
xlab("Perímetro Cefálico") +
ylab("Densidad") +
scale_fill_brewer(palette = "Set1")
print("proporcion embarazos")
prop.table(table(data$Tipo_embarazo))
library(aplpack)
bagplot(Perim_cef, Talla, approx.limit = length(Perim_cef), xlab = "Perímetro Cefálico", ylab = "Talla",
main = "Bagplot de Perímetro Cefálico vs. Talla")
quartil_0.1 <- quantile(Talla,0.1)
quartil_0.25 <- quantile(Talla, 0.25)
quartil_0.75 <- quantile(Talla, 0.75)
quartil_0.9 <- quantile(Talla, 0.9)
cat("el cuartil 0.1 es:", quartil_0.1, "\n")
cat("el cuartil 0.25 es:", quartil_0.25, "\n")
cat("el cuartil 0.75 es:", quartil_0.75, "\n")
cat("el cuartil 0.9 es:", quartil_0.9, "\n")
bgplot_ <- compute.bagplot(Perim_cef, Talla, approx.limit = length(Perim_cef))
values_bag <- bgplot_$pxy.bag
values_fence <- bgplot_$pxy.outer
no_outliers <- rbind(values_bag, values_fence)
bagplot(no_outliers, approx.limit = (length(no_outliers)/2), xlab = "Perímetro Cefálico", ylab = "Talla",
main = "Bagplot de Perímetro Cefálico vs. Talla (Sin los outliers del primer Bagplot")
bgp_grafico <- bagplot(Perim_cef, Talla, approx.limit = length(Perim_cef), xlab = "Perímetro Cefálico", ylab = "Talla",
main = "Bagplot de Perímetro Cefálico vs. Talla")
data_varones <- subset(data, Sexo == "Varon")
bagplot(data_varones$Perim_cef, data_varones$Talla, approx.limit = length(data_varones$Perim_cef), xlab = "Perímetro Cefálico", ylab = "Talla",
main = "Bagplot de Perímetro Cefálico vs. Talla (Hombres)")
bp_hombres <- compute.bagplot(data_varones$Perim_cef, data_varones$Talla, approx.limit = length(data_varones$Perim_cef))
values_hombres <- bp_hombres$hull.bag
values_h_outliers <- bp_hombres$pxy.outlier
data_mujeres <- subset(data, Sexo == "Mujer")
bagplot(data_mujeres$Perim_cef, data_mujeres$Talla, approx.limit = length(data_mujeres$Perim_cef), xlab = "Perímetro Cefálico", ylab = "Talla",
main = "Bagplot de Perímetro Cefálico vs. Talla (Mujeres)")
bp_mujeres <- compute.bagplot(data_mujeres$Perim_cef, data_mujeres$Talla, approx.limit = length(data_mujeres$Perim_cef))
values_mujeres <- bp_mujeres$hull.bag
values_m_outliers <- bp_mujeres$pxy.outlier
cat("el minimo valor de perimetro cefalico de mujeres dentro de la bolsa es:", min(values_mujeres[,1]), "\n")
cat("el minimo valor de perimetro cefalico de hombres dentro de la bolsa es:", min(values_hombres[,1]), "\n")
cat("el maximo valor de perimetro cefalico de mujeres dentro de la bolsa es:", max(values_mujeres[,1]), "\n")
cat("el maximo valor de perimetro cefalico de hombres dentro de la bolsa es:", max(values_hombres[,1]), "\n")
cat("el minimo valor de talla de mujeres dentro de la bolsa es:", min(values_mujeres[,2]), "\n")
cat("el minimo valor de talla de hombres dentro de la bolsa es:", min(values_hombres[,2]), "\n")
cat("el maximo valor de talla de mujeres dentro de la bolsa es:", max(values_mujeres[,2]), "\n")
cat("el maximo valor de talla de hombres dentro de la bolsa es:", max(values_hombres[,2]), "\n")
values_outliers <- bgplot_$pxy.outlier
values_hm_outliers <- rbind(values_h_outliers, values_m_outliers)
outliers <- rbind(values_outliers, values_hm_outliers)
filas_duplicadas <- duplicated(outliers) | duplicated(outliers, fromLast = TRUE)
diferencia <- outliers[!filas_duplicadas, ]
plot(diferencia)
source("C:/Users/lucaz/Downloads/Groisman_Gutter_Oyhanart.Rmd")
source("C:/Users/lucaz/Downloads/Groisman_Gutter_Oyhanart.Rmd")
source("C:/Users/lucaz/Downloads/Groisman_Gutter_Oyhanart.Rmd")
source("C:/Users/lucaz/Downloads/Groisman_Gutter_Oyhanart.Rmd")
source("C:/Users/lucaz/Downloads/Groisman_Gutter_Oyhanart.Rmd")
source("C:/Users/lucaz/Downloads/Groisman_Gutter_Oyhanart.Rmd")
source("C:/Users/lucaz/Downloads/Groisman_Gutter_Oyhanart.Rmd")
source("C:/Users/lucaz/Downloads/Groisman_Gutter_Oyhanart.Rmd")
source("C:/Users/lucaz/Downloads/Groisman_Gutter_Oyhanart.Rmd")
source("C:/Users/lucaz/Downloads/Groisman_Gutter_Oyhanart.Rmd")
# Ejercicio 1
source("C:/Users/lucaz/Downloads/Groisman_Gutter_Oyhanart.Rmd")
data <- read.table("ENNyS_menorA2.txt", header = TRUE)
attach(data)
library(ggplot2)
ggplot(data, aes(x = Perim_cef)) +
geom_histogram(aes(y = ..density..), breaks = seq(floor(min(Perim_cef)),ceiling(max(Perim_cef)) + 1, by = 1.75),fill = "lightblue", colour = "black") +
geom_density(kernel = "gaussian", colour = "red", n = 512) +  # Densidad con núcleo gaussiano
geom_density(kernel = "rectangular", colour = "green", n = 512) +
geom_density(kernel = "epanechnikov", colour = "blue", n = 512)+
theme_minimal()
hist_data <- hist(Perim_cef, breaks = seq(floor(min(Perim_cef)),ceiling(max(Perim_cef)) + 1, by = 1.75), plot = FALSE)
bin_widths <- diff(hist_data$breaks)
# Buscamos los indices de los bins que contengan al 42 y al 48.
indices_extremos <- which(hist_data$breaks[-length(hist_data$breaks)] <= 48 & hist_data$breaks[-1] >= 42)
# Calculo el área de los bins que están totalmente en rango (ambos bordes)
bins_totales <- hist_data$density[indices_extremos[-c(1, length(indices_extremos))]]
area_de_totales <- sum(bins_totales * bin_widths[indices_extremos[-c(1, length(indices_extremos))]])
# Área parcial del primer bin en rango
primer_bin_parcial = hist_data$breaks[indices_extremos[1] + 1] - 42
primer_area = primer_bin_parcial * hist_data$density[indices_extremos[1]]
# Área parcial del último bin en rango
ultimo_bin_parcial = 48 - hist_data$breaks[indices_extremos[length(indices_extremos)]]
ultima_area = ultimo_bin_parcial * hist_data$density[indices_extremos[length(indices_extremos)]]
# Sumo las áreas
total_area = area_de_totales + primer_area + ultima_area
#Calculo la probabilidad usando la densidad
density_data <- density(Perim_cef, kernel = "epanechnikov", from=floor(min(Perim_cef)), to=ceiling(max(Perim_cef)), n=512)
x_vals <- seq(42, 48, length.out = 100)
y_vals <- approx(density_data$x, density_data$y, xout=x_vals)$y
prob_density <- sum(y_vals) * (x_vals[2] - x_vals[1])
cat("La probabilidad calculada con el histograma es: ", total_area, "\t")
cat("La probabilidad calculada con la estimacion de la densidad es: ", prob_density)
gaussian_density <- density(data$Perim_cef,kernel = "gaussian")
rectangular_density <- density(data$Perim_cef,kernel = "rectangular")
epanechnikov_density <- density(data$Perim_cef,kernel = "epanechnikov")
ggplot(data, aes(x = Perim_cef)) +
geom_density(kernel = "gaussian", bw =gaussian_density$bw ,colour = "red") +
geom_density(kernel = "gaussian",bw =rectangular_density$bw*2,colour = "green") +
geom_density(kernel = "gaussian",bw = epanechnikov_density$bw/2, colour = "blue")+
theme_minimal() + ylab("Densidad") + xlab("Perim_Cef")
ggplot(data, aes(x = Perim_cef)) +
geom_density(kernel = "rectangular", bw =gaussian_density$bw ,colour = "red") +
geom_density(kernel = "rectangular",bw =rectangular_density$bw*2,colour = "green") +
geom_density(kernel = "rectangular",bw = epanechnikov_density$bw/2, colour = "blue")+
theme_minimal() + ylab("Densidad") + xlab("Perim_Cef")
ggplot(data, aes(x = Perim_cef)) +
geom_density(kernel = "epanechnikov", bw =gaussian_density$bw ,colour = "red") +
geom_density(kernel = "epanechnikov",bw =rectangular_density$bw*2,colour = "green") +
geom_density(kernel = "epanechnikov",bw = epanechnikov_density$bw/2, colour = "blue")+
theme_minimal() + ylab("Densidad") + xlab("Perim_Cef")
# Histograma y densidad estimada con núcleo gaussiano
ggplot(data, aes(x = Perim_cef)) +
geom_histogram(aes(y = ..density..), binwidth = 1,position = 'identity',alpha = 0.5) +
geom_density(alpha = 0.7) +
ggtitle("Histograma y Densidad Gaussiana de Perímetro Cefálico") +
xlab("Perímetro Cefálico") +
ylab("Densidad") +
theme_minimal()
# Histograma y densidad estimada con núcleo gaussiano
ggplot(data, aes(x = Perim_cef,fill = Sexo)) +
geom_histogram(aes(y = ..density..), binwidth = 1,position = 'identity',alpha = 0.5) +
geom_density(alpha = 0.7) +
ggtitle("Histograma y Densidad Gaussiana de Perímetro Cefálico Por Sexo") +
xlab("Perímetro Cefálico") +
ylab("Densidad") +
theme_minimal()+
scale_fill_brewer(palette = "Set1")
ggplot(data, aes(x = Perim_cef)) +
geom_histogram(aes(y = ..density..), position = "identity", alpha = 0.5) +
geom_density(alpha = 0.7) +
ggtitle("Densidades Gaussianas de Perímetro Cefálico") +
xlab("Perímetro Cefálico") +
ylab("Densidad")
# Suponiendo que los tipos de embarazo son 'Simple' y 'Múltiple'
ggplot(data, aes(x = Perim_cef, fill = Tipo_embarazo)) +
geom_histogram(aes(y = ..density..), position = "identity", alpha = 0.5) +
geom_density(alpha = 0.7) +
ggtitle("Densidades Gaussianas de Perímetro Cefálico por Tipo de Embarazo") +
xlab("Perímetro Cefálico") +
ylab("Densidad") +
scale_fill_brewer(palette = "Set1")
print("proporcion embarazos")
prop.table(table(data$Tipo_embarazo))
library(aplpack)
bagplot(Perim_cef, Talla, approx.limit = length(Perim_cef), xlab = "Perímetro Cefálico", ylab = "Talla",
main = "Bagplot de Perímetro Cefálico vs. Talla")
quartil_0.1 <- quantile(Talla,0.1)
quartil_0.25 <- quantile(Talla, 0.25)
quartil_0.75 <- quantile(Talla, 0.75)
quartil_0.9 <- quantile(Talla, 0.9)
cat("el cuartil 0.1 es:", quartil_0.1, "\n")
cat("el cuartil 0.25 es:", quartil_0.25, "\n")
cat("el cuartil 0.75 es:", quartil_0.75, "\n")
cat("el cuartil 0.9 es:", quartil_0.9, "\n")
bgplot_ <- compute.bagplot(Perim_cef, Talla, approx.limit = length(Perim_cef))
values_bag <- bgplot_$pxy.bag
values_fence <- bgplot_$pxy.outer
no_outliers <- rbind(values_bag, values_fence)
bagplot(no_outliers, approx.limit = (length(no_outliers)/2), xlab = "Perímetro Cefálico", ylab = "Talla",
main = "Bagplot de Perímetro Cefálico vs. Talla (Sin los outliers del primer Bagplot")
bgp_grafico <- bagplot(Perim_cef, Talla, approx.limit = length(Perim_cef), xlab = "Perímetro Cefálico", ylab = "Talla",
main = "Bagplot de Perímetro Cefálico vs. Talla")
data_varones <- subset(data, Sexo == "Varon")
bagplot(data_varones$Perim_cef, data_varones$Talla, approx.limit = length(data_varones$Perim_cef), xlab = "Perímetro Cefálico", ylab = "Talla",
main = "Bagplot de Perímetro Cefálico vs. Talla (Hombres)")
bp_hombres <- compute.bagplot(data_varones$Perim_cef, data_varones$Talla, approx.limit = length(data_varones$Perim_cef))
values_hombres <- bp_hombres$hull.bag
values_h_outliers <- bp_hombres$pxy.outlier
data_mujeres <- subset(data, Sexo == "Mujer")
bagplot(data_mujeres$Perim_cef, data_mujeres$Talla, approx.limit = length(data_mujeres$Perim_cef), xlab = "Perímetro Cefálico", ylab = "Talla",
main = "Bagplot de Perímetro Cefálico vs. Talla (Mujeres)")
bp_mujeres <- compute.bagplot(data_mujeres$Perim_cef, data_mujeres$Talla, approx.limit = length(data_mujeres$Perim_cef))
values_mujeres <- bp_mujeres$hull.bag
values_m_outliers <- bp_mujeres$pxy.outlier
cat("el minimo valor de perimetro cefalico de mujeres dentro de la bolsa es:", min(values_mujeres[,1]), "\n")
cat("el minimo valor de perimetro cefalico de hombres dentro de la bolsa es:", min(values_hombres[,1]), "\n")
cat("el maximo valor de perimetro cefalico de mujeres dentro de la bolsa es:", max(values_mujeres[,1]), "\n")
cat("el maximo valor de perimetro cefalico de hombres dentro de la bolsa es:", max(values_hombres[,1]), "\n")
cat("el minimo valor de talla de mujeres dentro de la bolsa es:", min(values_mujeres[,2]), "\n")
cat("el minimo valor de talla de hombres dentro de la bolsa es:", min(values_hombres[,2]), "\n")
cat("el maximo valor de talla de mujeres dentro de la bolsa es:", max(values_mujeres[,2]), "\n")
cat("el maximo valor de talla de hombres dentro de la bolsa es:", max(values_hombres[,2]), "\n")
values_outliers <- bgplot_$pxy.outlier
values_hm_outliers <- rbind(values_h_outliers, values_m_outliers)
outliers <- rbind(values_outliers, values_hm_outliers)
filas_duplicadas <- duplicated(outliers) | duplicated(outliers, fromLast = TRUE)
diferencia <- outliers[!filas_duplicadas, ]
plot(diferencia)
source("C:/Users/lucaz/Downloads/Groisman_Gutter_Oyhanart.Rmd")
qnorm(0)
qnorm(0.1)
qnorm(1/2)
qnorm(1/2+.01)
qnorm(1/2)
qnorm(.025)
qnorm(1-.025)
theta_mv <- sqrt(sum(datos^2))
knitr::opts_chunk$set(echo = TRUE)
```{}
# Seteo la semilla
set.seed(42)
# Genero la muestra
sample <- rexp(20, rate = 1/2)
# Print the generated sample
print(sample)
# Genero la muestra
?sample <- rexp(20, rate = 1/2)
# Genero la muestra
sample <- rexp(20, rate = 1/2)
# Print the generated sample
print(sample)
?rexp
?rexp
?rexp()
rexp
rexp
rexp
return(media^2)
media <- mean(data)
T1 <- function(data){
media <- mean(data)
return(media^2)
}
print(T1(sample))
print(T1(sample))
# Defino los estimadores
T1 <- mean(data)^2
# Defino los estimadores
T1 <- mean(sample)^2
# Genero la muestra
sample <- rexp(20, rate = 1/2)
# Seteo la semilla
set.seed(42)
# Genero la muestra
sample <- rexp(20, rate = 1/2)
# Defino los estimadores
T1 <- mean(sample)^2
print(T1)
T2 <- sum(sample^2)/2*length(sample)
T2 <- sum(sample^2)/(2*length(sample))
print(T1)
print(T2)
# Genero la muestra
n <- 20
lambda <- 1/2
sample <- rexp(n, rate = lambda)
T2 <- sum(sample^2)/(2*n)
print(T1)
print(T2)
T2 <- sum(sample^2)/(2*n)
print(T2)
T2 <- sum(sample^2)/(2*20)
print(T2)
T2 <- sum(sample^2)/(2*length(sample))
print(T2)
T2 <- sum(sample^2)/(2*n)
# Seteo la semilla
set.seed(42)
# Genero la muestra
n <- 20
lambda <- 1/2
sample <- rexp(n, rate = lambda)
# Defino los estimadores
T1 <- mean(sample)^2
T2 <- sum(sample^2)/(2*n)
print(T1)
print(T2)
source("~/.active-rstudio-document", echo=TRUE)
# Seteo la semilla
set.seed(2023)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
print(mean(res_T1))
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
res_T1
boxplot(res_T1, res_T2, xlab= 'Estimadores', ylab='N_reps')
boxplot(res_T1, res_T2, main='Boxplot paralelos', col =c('green', 'orange') xlab= 'Estimadores', ylab='N_reps')
boxplot(res_T1, res_T2, main='Boxplot paralelos', col=c('green', 'orange'), xlab= 'Estimadores', ylab='N_reps')
boxplot(res_T1, res_T2, main='Boxplot paralelos', col=c('green', 'orange'), xlab= 'Estimadores', ylab='N_reps')
boxplot(res_T1, res_T2, main='Boxplot paralelos', col=c('green', 'orange'), xlab= 'Estimadores', ylab='Valores obtenidos')
boxplot(res_T1, res_T2, main='Boxplot paralelos', col=c('green', 'orange'), xlab= 'Estimadores', ylab='Valores obtenidos', boxwex=1)
boxplot(res_T1, res_T2, main='Boxplot paralelos', col=c('green', 'orange'), xlab= 'Estimadores', ylab='Valores obtenidos', boxwex=0.5)
boxplot(res_T1, res_T2, main='Boxplot paralelos', col=c('green', 'orange'), xlab= 'Estimadores', ylab='Valores obtenidos', boxwex=0.25)
boxplot(res_T1, res_T2, main='Boxplot paralelos', col=c('green', 'orange'), xlab= 'Estimadores', ylab='Valores obtenidos', boxwex=0.25, names=c('T1', 'T2'))
boxplot(res_T1, res_T2, main='Boxplot paralelos para T1 y T2', col=c('green', 'orange'), xlab= 'Estimadores', ylab='Valores obtenidos', boxwex=0.25, names=c('T1', 'T2'))
N_rep <- 2000
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
# d)
densidad_T1 <- density(res_T1, kernel = 'gaussian')
# d)
densidad_T1 <- density(res_T1, kernel = 'gaussian')
plot(densidad_T1)
densidad_T2 <- density(res_T2, kernel = 'gaussian')
plot(densidad_T1, densidad_T2)
plot(c(densidad_T1, densidad_T2))
plot(densidad_T1)
plot(densidad_T2)
curve(densidad_T2, add=TRUE)
densidad_T2 <- density(res_T2, kernel = 'gaussian')
curve(densidad_T2, add=TRUE)
plot(densidad_T1)
curve(densidad_T2, add=TRUE)
densidad_T2(-0.531)
densidad_T2[-0.531]
print(densidad_T2[-0.531])
curve(densidad_T2$x, densidad_T2$y, add=TRUE)
lines(densidad_T2)
source("~/.active-rstudio-document", echo=TRUE)
plot(densidad_T1, col='blue', main= 'Densidades estimadas para T1 y T2')
lines(densidad_T2, col="red")
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
qchisq(0.95, 1)
ln(6/5.5)
log(6/5.5)
-2*(40*5.5*(log(6/5.5)+1)-240)
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/lucaz/OneDrive/Documents/Exactas/Estadistica/tp_final")
